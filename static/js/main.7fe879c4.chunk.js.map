{"version":3,"sources":["redux/actions/filter.js","redux/reducers/filter.js","redux/actions/item.js","redux/reducers/items.js","redux/reducers/index.js","redux/store/phoneBook-store.js","components/Button/Button.styled.jsx","components/Button/Button.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","redux/selectors/contact-selectors.js","components/ContactList/ContactList.styled.jsx","components/IconButton/IconButton.styled.jsx","components/IconButton/IconButton.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Container/Container.styled.jsx","components/Container/Container.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["filterItem","createAction","filterReducer","createReducer","_","payload","addItem","deleteItem","itemsReducer","state","find","contact","name","includes","toast","warn","filter","id","rootReducer","combineReducers","items","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfig","key","storage","persistedReducer","persistReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","CustomButton","styled","button","Button","onClick","text","Form","form","InputDiv","div","Input","input","ContactForm","useState","setName","number","setNumber","dispatch","useDispatch","handleChange","event","target","value","clearForm","onSubmit","e","preventDefault","randomID","uuidv4","Provider","size","type","onChange","pattern","title","required","autoComplete","getFilter","getVisibleContacts","getItems","normalizedFilter","toLowerCase","List","ul","Item","li","CustomIconButton","IconButton","children","defaultProps","ContactList","useSelector","map","FilterContainer","Filter","currentTarget","placeholder","ContainerCustom","Container","App","position","autoClose","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.7fe879c4.chunk.js","sourcesContent":["// import { FILTER_FIND } from '../types/phoneBook-types'\r\nimport { createAction } from '@reduxjs/toolkit'\r\n// console.log('FILTER_FIND >>', FILTER_FIND)\r\n\r\nexport const filterItem = createAction('FILTER_FIND')\r\n// export const filterItem = (value) => ({\r\n//   type: FILTER_FIND,\r\n//   payload: value,\r\n// })\r\n","// import { FILTER_FIND } from '../types/phoneBook-types'\r\nimport { createReducer } from '@reduxjs/toolkit'\r\nimport { filterItem } from '../actions/filter'\r\n\r\n// const initialState = ''\r\n\r\nconst filterReducer = createReducer('', {\r\n  [filterItem]: (_, { payload }) => payload,\r\n})\r\n\r\n// const filterReducer = (state = initialState, action) => {\r\n//   switch (action.type) {\r\n//     case FILTER_FIND:\r\n//       return action.payload\r\n//     default:\r\n//       return state\r\n//   }\r\n// }\r\n\r\nexport default filterReducer\r\n","// import { ITEM_ADD, ITEM_DELETE } from '../types/phoneBook-types'\r\nimport { createAction } from '@reduxjs/toolkit'\r\n\r\nexport const addItem = createAction('ITEM_ADD')\r\n// export const addItem = (formData) => ({\r\n//   type: ITEM_ADD,\r\n//   payload: formData,\r\n// })\r\n\r\nexport const deleteItem = createAction('ITEM_DELETE')\r\n// export const deleteItem = (id) => ({\r\n//   type: ITEM_DELETE,\r\n//   payload: id,\r\n// })\r\n\r\n// console.log(addItem(555))\r\n","// import { ITEM_ADD, ITEM_DELETE } from '../types/phoneBook-types'\r\nimport { toast } from 'react-toastify'\r\nimport { createReducer } from '@reduxjs/toolkit'\r\nimport { addItem, deleteItem } from '../actions/item'\r\n// import ITEM_DELETE from '../types/phoneBook-types'\r\n\r\n//Вариант без createReducer\r\n// const initialState = []\r\n\r\n// const itemsReducer = createReducer([], {\r\n//   [ITEM_ADD]: (state, action) => [...state, action.payload],\r\n//   [ITEM_DELETE]: (state, action) =>\r\n//     state.filter((item) => item.id !== action.payload),\r\n// })\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [addItem]: (state, { payload }) => {\r\n    const findContact = state.find((contact) =>\r\n      contact.name.includes(payload.name),\r\n    )\r\n    if (findContact) {\r\n      toast.warn(`${payload.name} is already in contacts`)\r\n      return\r\n    }\r\n    return [...state, payload]\r\n    // return findContact\r\n    //   ? alert(`${payload.name} is already in contacts`)\r\n    //   : [...state, payload]\r\n  },\r\n  [deleteItem]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n})\r\n\r\n// Вариант без createReducer\r\n// const itemsReducer = (state = initialState, action) => {\r\n//   console.log('action.type >>', action.type)\r\n//   console.log('state >>', state)\r\n//   switch (action.type) {\r\n//     case ITEM_ADD:\r\n//       return [...state, action.payload]\r\n//     case ITEM_DELETE:\r\n//       return state.filter((item) => item.id !== action.payload)\r\n//     default:\r\n//       return state\r\n//   }\r\n// }\r\n\r\nexport default itemsReducer\r\n","// import { combineReducers } from 'redux'\r\nimport { combineReducers } from '@reduxjs/toolkit'\r\nimport filterReducer from './filter'\r\nimport itemsReducer from './items'\r\n\r\nexport const rootReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n})\r\n","// import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\r\nimport logger from 'redux-logger'\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n// import { devToolsEnhancer } from 'redux-devtools-extension'\r\nimport { rootReducer } from '../reducers/index'\r\n// import filterReducer from '../reducers/filter'\r\nimport itemsReducer from '../reducers/items'\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n]\r\n\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  // blacklist: ['filter'],\r\n}\r\n\r\n// const rootReducer = combineReducers({\r\n//   items: itemsReducer,\r\n//   filter: filterReducer,\r\n// })\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\n// Пишем для себя, чтоб понять структуру\r\n// const initialState = {\r\n//   contacts: {\r\n//     items: [],\r\n//     filter: '',\r\n//   },\r\n// }\r\n\r\n// Стандартная болванка reducer\r\n// const reducer = (state = initialState, action) => {\r\n//   console.log('log action in reducer >>', action)\r\n//   return state\r\n// }\r\n\r\n// Старое с redux без toolkit\r\n// const store = createStore(rootReducer, devToolsEnhancer())\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  // reducer: {\r\n  //   items: persistReducer(persistConfig, itemsReducer),\r\n  // },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n})\r\n\r\nconst persistor = persistStore(store)\r\n\r\nexport default { store, persistor }\r\n","import styled from '@emotion/styled'\r\nexport const CustomButton = styled.button`\r\n  font-weight: 400;\r\n  line-height: 1.33;\r\n    width: 197px;\r\n  background-color: orange;\r\n  margin-top: 15px;\r\n  margin-left: 29px;\r\n  border: none;\r\n  outline: none;\r\n  border-radius: 4px;\r\n  text-align: center;\r\n  box-shadow: 0px 1px 3px rgb(0 0 0 / 12%), 0px 1px 1px rgb(0 0 0 / 14%),\r\n    0px 2px 1px rgb(0 0 0 / 20%);\r\n    &:focus,\r\n  &:hover {\r\n    box-shadow: 2px 3px 17px 0px rgb(0 0 0 / 78%), -1px 0px 2px rgb(0 0 0 / 14%), 0px 2px 1px rgb(0 0 0 / 20%);\r\n    transition: box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1);\r\n`\r\n","import React from 'react'\r\nimport { CustomButton } from './Button.styled'\r\n\r\nfunction Button({ onClick, text }) {\r\n  return <CustomButton onClick={onClick}>{text}</CustomButton>\r\n}\r\n\r\nexport default Button\r\n","import styled from '@emotion/styled'\r\n\r\nexport const Form = styled.form`\r\n  padding: 15px;\r\n`\r\n\r\nexport const InputDiv = styled.div`\r\n  display: flex;\r\n`\r\nexport const Input = styled.input`\r\n \r\n  padding: 3px 10px;\r\n border: 2px solid rgba(33, 33, 33, 0.2);\r\n box-sizing: border-box;\r\n  border-radius: 4px;\r\n  &:focus,\r\n  &:hover {\r\n    border-color: #00adffa8;\r\n    outline: none;\r\n    transition: border-color 350ms cubic-bezier(0.4, 0, 0.2, 1);\r\n`\r\n","import { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { addItem } from '../../redux/actions/item'\r\n// import { ToastContainer, toast } from 'react-toastify'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nimport { FcPhoneAndroid, FcBusinessContact } from 'react-icons/fc'\r\nimport { IconContext } from 'react-icons'\r\n\r\nimport Button from '../Button'\r\nimport { Form, InputDiv, Input } from './ContactForm.styled'\r\n\r\nconst ContactForm = () => {\r\n  const [name, setName] = useState('')\r\n  const [number, setNumber] = useState('')\r\n  const dispatch = useDispatch()\r\n\r\n  const handleChange = (event) => {\r\n    // console.log(event.target.name)\r\n\r\n    const { name, value } = event.target\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value)\r\n        break\r\n      case 'number':\r\n        setNumber(value)\r\n        break\r\n      default:\r\n        //можно вместо return написать, например, \"Неподдерживаемый тип поля\"\r\n        return\r\n    }\r\n  }\r\n\r\n  // const handleSubmit = (name, number) => {\r\n  //   const randomID = uuidv4()\r\n  //   const newContact = { id: randomID, name, number }\r\n  //   const findContact = contacts.find((contact) => contact.name.includes(name))\r\n\r\n  //   findContact\r\n  //     ? toast.warn(`${name} is already in contacts`)\r\n  //     : setContacts((prevState) => [...prevState, newContact])\r\n  // }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    const randomID = uuidv4()\r\n    const newContact = { id: randomID, name, number }\r\n    dispatch(addItem(newContact))\r\n    // const { name, number } = this.state\r\n    // const { onSubmit } = this.props\r\n    // onSubmit(name, number)\r\n    clearForm()\r\n  }\r\n\r\n  const clearForm = () => {\r\n    setName('')\r\n    setNumber('')\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Form onSubmit={handleSubmit}>\r\n        <label>\r\n          <h2>Name</h2>\r\n          <InputDiv>\r\n            <IconContext.Provider value={{ size: '23px' }}>\r\n              <FcBusinessContact />\r\n            </IconContext.Provider>\r\n            &nbsp;\r\n            <Input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={handleChange}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              autoComplete=\"off\"\r\n            />\r\n          </InputDiv>\r\n        </label>\r\n\r\n        <label>\r\n          <h2>Number</h2>\r\n          <InputDiv>\r\n            <IconContext.Provider value={{ size: '23px' }}>\r\n              <FcPhoneAndroid />\r\n            </IconContext.Provider>\r\n            &nbsp;\r\n            <Input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={number}\r\n              onChange={handleChange}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              autoComplete=\"off\"\r\n            />\r\n          </InputDiv>\r\n        </label>\r\n        <Button text=\"Add contact\" />\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ContactForm\r\n\r\n//------ the old class\r\n// export default class ContactForm extends Component {\r\n//   state = {\r\n//     name: '',\r\n//     number: '',\r\n//   }\r\n//   handleChange = ({ target }) => {\r\n//     const value = target.value\r\n//     const name = target.name\r\n//     this.setState({\r\n//       [name]: value,\r\n//     })\r\n//   }\r\n\r\n//   handleSubmit = (e) => {\r\n//     e.preventDefault()\r\n//     const { name, number } = this.state\r\n//     const { onSubmit } = this.props\r\n//     onSubmit(name, number)\r\n//     this.clearForm()\r\n//   }\r\n\r\n//   clearForm = () => {\r\n//     this.setState({ number: '', name: '' })\r\n//   }\r\n\r\n//   render() {\r\n//     const { number, name } = this.state\r\n//     return (\r\n//       <div>\r\n//         <Form onSubmit={this.handleSubmit}>\r\n//           <label>\r\n//             <h2>Name</h2>\r\n//             <InputDiv>\r\n//               <IconContext.Provider value={{ size: '23px' }}>\r\n//                 <FcBusinessContact />\r\n//               </IconContext.Provider>\r\n//               &nbsp;\r\n//               <Input\r\n//                 type=\"text\"\r\n//                 name=\"name\"\r\n//                 value={name}\r\n//                 onChange={this.handleChange}\r\n//                 pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//                 title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//                 required\r\n//                 autoComplete=\"off\"\r\n//               />\r\n//             </InputDiv>\r\n//           </label>\r\n\r\n//           <label>\r\n//             <h2>Number</h2>\r\n//             <InputDiv>\r\n//               <IconContext.Provider value={{ size: '23px' }}>\r\n//                 <FcPhoneAndroid />\r\n//               </IconContext.Provider>\r\n//               &nbsp;\r\n//               <Input\r\n//                 type=\"tel\"\r\n//                 name=\"number\"\r\n//                 value={number}\r\n//                 onChange={this.handleChange}\r\n//                 pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//                 title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//                 required\r\n//                 autoComplete=\"off\"\r\n//               />\r\n//             </InputDiv>\r\n//           </label>\r\n//           <Button text=\"Add contact\" />\r\n//         </Form>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n","export const getItems = (state) => state.items\r\nexport const getFilter = (state) => state.filter\r\n\r\nexport const getVisibleContacts = (state) => {\r\n  const filter = getFilter(state)\r\n  const items = getItems(state)\r\n  const normalizedFilter = filter.toLowerCase()\r\n  return items.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  )\r\n}\r\n","import styled from '@emotion/styled'\r\n\r\nexport const List = styled.ul`\r\n  border-radius: 4px;\r\n  padding: 24px;\r\n  //   background-color: #7c7c7c;\r\n  //   color: #fff;\r\n`\r\nexport const Item = styled.li`\r\n  display: flex;\r\n  padding-bottom: 10px;\r\n  justify-content: space-between;\r\n  align-items: baseline;\r\n  font-weight: normal;\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n`\r\n","import styled from '@emotion/styled'\r\n\r\nexport const CustomIconButton = styled.button`\r\n  background-color: transparent;\r\n  border: none;\r\ntransition: 100ms;\r\n    &:focus,\r\n  &:hover {\r\n\r\n    transform: scale(1.1);\r\n    color: red;\r\n`\r\n","import React from 'react'\r\nimport { CustomIconButton } from './IconButton.styled'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction IconButton({ children, onClick }) {\r\n  return (\r\n    <CustomIconButton type=\"button\" onClick={onClick}>\r\n      {children}\r\n    </CustomIconButton>\r\n  )\r\n}\r\n\r\nIconButton.defaultProps = {\r\n  onClick: () => null,\r\n  children: null,\r\n}\r\n\r\nIconButton.propTypes = {\r\n  children: PropTypes.node,\r\n  onClick: PropTypes.func,\r\n}\r\n\r\nexport default IconButton\r\n","// import PropTypes from 'prop-types'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { deleteItem } from '../../redux/actions/item'\r\nimport { RiDeleteBin6Fill } from 'react-icons/ri'\r\nimport { IconContext } from 'react-icons'\r\n\r\nimport { getVisibleContacts } from '../../redux/selectors/contact-selectors'\r\nimport { List, Item } from './ContactList.styled'\r\nimport IconButton from '../IconButton'\r\n\r\n// const getVisibleContacts = () => {\r\n//     const normalizedFilter = filter.toLowerCase()\r\n//     return contacts.filter((contact) =>\r\n//       contact.name.toLowerCase().includes(normalizedFilter),\r\n//     )\r\n//   }\r\n\r\n// const getItems = (state) => state.items\r\n// const getFilter = (state) => state.filter\r\n// const getVisibleContacts = (state) => {\r\n//   const filter = getFilter(state)\r\n//   const items = getItems(state)\r\n//   const normalizedFilter = filter.toLowerCase()\r\n//   return items.filter((contact) =>\r\n//     contact.name.toLowerCase().includes(normalizedFilter),\r\n//   )\r\n// }\r\n\r\n// const deleteContact = (contactId) => {\r\n//     setContacts((prevState) =>\r\n//       prevState.filter((contact) => contact.id !== contactId),\r\n//     )\r\n//   }\r\n\r\nexport default function ContactList() {\r\n  const dispatch = useDispatch()\r\n\r\n  // console.log('items >>', items)\r\n  const DeleteContact = (id) => {\r\n    dispatch(deleteItem(id))\r\n  }\r\n\r\n  const items = useSelector(getVisibleContacts)\r\n\r\n  return (\r\n    <List>\r\n      {items.map((contact) => (\r\n        <Item key={contact.id}>\r\n          {contact.name}: {contact.number}\r\n          <IconButton onClick={() => DeleteContact(contact.id)}>\r\n            <IconContext.Provider value={{ size: '23px' }}>\r\n              <RiDeleteBin6Fill />\r\n            </IconContext.Provider>\r\n          </IconButton>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  )\r\n}\r\n\r\n// ContactList.propTypes = {\r\n//   // contacts: PropTypes.array.isRequired,\r\n//   // onClick: PropTypes.func.isRequired,\r\n// }\r\n","import styled from '@emotion/styled'\r\n\r\nexport const FilterContainer = styled.div`\r\n  padding: 15px;\r\n`\r\n","// import PropTypes from 'prop-types'\r\n\r\nimport React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { IconContext } from 'react-icons'\r\nimport { FcSearch } from 'react-icons/fc'\r\n\r\nimport { InputDiv } from '../ContactForm/ContactForm.styled'\r\nimport { Input } from '../ContactForm/ContactForm.styled'\r\nimport { FilterContainer } from './Filter.styled'\r\nimport { getFilter } from '../../redux/selectors/contact-selectors'\r\nimport { filterItem } from '../../redux/actions/filter'\r\n\r\nexport default function Filter({ onChange }) {\r\n  const dispatch = useDispatch()\r\n  const filter = useSelector(getFilter)\r\n  return (\r\n    <label>\r\n      <FilterContainer>\r\n        <h3>Find contacts by name</h3>\r\n        <InputDiv>\r\n          <IconContext.Provider value={{ size: '23px' }}>\r\n            <FcSearch />\r\n          </IconContext.Provider>\r\n          &nbsp;\r\n          <Input\r\n            type=\"text\"\r\n            name=\"filter\"\r\n            value={filter}\r\n            onChange={(e) => dispatch(filterItem(e.currentTarget.value))}\r\n            placeholder=\"Search contact\"\r\n            autoComplete=\"off\"\r\n          />\r\n        </InputDiv>\r\n      </FilterContainer>\r\n    </label>\r\n  )\r\n}\r\n// Filter.propTypes = {\r\n//   onChange: PropTypes.func.isRequired,\r\n//   filter: PropTypes.string.isRequired,\r\n// }\r\n","import styled from '@emotion/styled'\r\n\r\nexport const ContainerCustom = styled.div`\r\n  margin: 0 auto;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n  background-color: rgb(0 0 0 / 12%);\r\n  background-image: linear-gradient(28deg, #a8ff36, transparent);\r\n  border: 2px solid #4a4a4a;\r\n  border-radius: 5px;\r\n  max-width: 400px;\r\n`\r\n","import { ContainerCustom } from './Container.styled'\r\n\r\nfunction Container({ children }) {\r\n  return <ContainerCustom>{children}</ContainerCustom>\r\n}\r\n\r\nexport default Container\r\n","// import { useState, useEffect } from 'react'\r\n// import { connect } from 'react-redux'\r\n// import * as actions from './redux/actions/explain-actions'\r\nimport { ToastContainer } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\n\r\nimport ContactForm from './components/ContactForm'\r\nimport ContactList from './components/ContactList'\r\nimport Filter from './components/Filter'\r\nimport Container from './components/Container'\r\n// import { v4 as uuidv4 } from 'uuid'\r\n\r\nconst App = () => {\r\n  // const [contacts, setContacts] = useState(\r\n  //   () => JSON.parse(window.localStorage.getItem('contacts')) ?? [],\r\n  // )\r\n  // // const [filter, setFilter] = useState('')\r\n\r\n  // useEffect(() => {\r\n  //   window.localStorage.setItem('contacts', JSON.stringify(contacts))\r\n  // }, [contacts])\r\n\r\n  // const handleChange = ({ currentTarget }) => {\r\n  //   const value = currentTarget.value\r\n  //   const name = currentTarget.name\r\n\r\n  //   switch (name) {\r\n  //     case 'contacts':\r\n  //       setContacts(value)\r\n  //       break\r\n  //     case 'filter':\r\n  //       setFilter(value)\r\n  //       break\r\n  //     default:\r\n  //       return\r\n  //   }\r\n  // }\r\n\r\n  // const handleSubmit = (name, number) => {\r\n  //   const randomID = uuidv4()\r\n  //   const newContact = { id: randomID, name, number }\r\n  //   const findContact = contacts.find((contact) => contact.name.includes(name))\r\n\r\n  //   findContact\r\n  //     ? toast.warn(`${name} is already in contacts`)\r\n  //     : setContacts((prevState) => [...prevState, newContact])\r\n  // }\r\n\r\n  // const getVisibleContacts = () => {\r\n  //   const normalizedFilter = filter.toLowerCase()\r\n  //   return contacts.filter((contact) =>\r\n  //     contact.name.toLowerCase().includes(normalizedFilter),\r\n  //   )\r\n  // }\r\n\r\n  // const deleteContact = (contactId) => {\r\n  //   setContacts((prevState) =>\r\n  //     prevState.filter((contact) => contact.id !== contactId),\r\n  //   )\r\n  // }\r\n  // console.log('getVisibleContacts >>', getVisibleContacts())\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n      <ToastContainer position=\"top-center\" autoClose={2000} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\n//-----the old class\r\n// export default class App extends Component {\r\n//   state = {\r\n//     contacts: [],\r\n//     filter: '',\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     const contacts = localStorage.getItem('contacts')\r\n//     const parsedContatcs = JSON.parse(contacts)\r\n//     if (parsedContatcs) {\r\n//       this.setState({ contacts: parsedContatcs })\r\n//     }\r\n//   }\r\n\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     if (this.state.contacts !== prevState.contacts) {\r\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\r\n//     }\r\n//   }\r\n\r\n//   handleChange = ({ currentTarget }) => {\r\n//     const value = currentTarget.value\r\n//     const name = currentTarget.name\r\n\r\n//     this.setState({\r\n//       [name]: value,\r\n//     })\r\n//   }\r\n\r\n//   handleSubmit = (name, number) => {\r\n//     const randomID = uuidv4()\r\n//     const newContact = { id: randomID, name, number }\r\n\r\n//     const findContact = this.state.contacts.find((contact) =>\r\n//       contact.name.includes(name),\r\n//     )\r\n\r\n//     findContact\r\n//       ? toast.warn(`${name} is already in contacts`)\r\n//       : // alert(`${name} is already in contacts`)\r\n//         this.setState((prevState) => ({\r\n//           contacts: [...prevState.contacts, newContact],\r\n//         }))\r\n//   }\r\n\r\n//   getVisibleContacts = () => {\r\n//     const { filter, contacts } = this.state\r\n//     const normalizedFilter = filter.toLowerCase()\r\n//     return contacts.filter((contact) =>\r\n//       contact.name.toLowerCase().includes(normalizedFilter),\r\n//     )\r\n//   }\r\n\r\n//   deleteContact = (contactId) => {\r\n//     this.setState((prevState) => ({\r\n//       contacts: prevState.contacts.filter(\r\n//         (contact) => contact.id !== contactId,\r\n//       ),\r\n//     }))\r\n//   }\r\n\r\n//   render() {\r\n//     const { filter } = this.state\r\n//     const visibleContacts = this.getVisibleContacts()\r\n//     return (\r\n//       <Container>\r\n//         <h1>Phonebook</h1>\r\n//         <ContactForm onSubmit={this.handleSubmit} />\r\n\r\n//         <h2>Contacts</h2>\r\n//         <Filter onChange={this.handleChange} filter={filter} />\r\n//         <ContactList contacts={visibleContacts} onClick={this.deleteContact} />\r\n//         <ToastContainer position=\"top-center\" autoClose={2000} />\r\n//       </Container>\r\n//     )\r\n//   }\r\n// }\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport store from './redux/store/phoneBook-store'\n\n// import { myAction } from './redux/actions/phoneBook-actions'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}